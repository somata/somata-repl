#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var PipelineREPL, SomataPipeline, argv, client, fs, pipe, repl, runWith, script, script_filename, somata;

  somata = require('somata');

  SomataPipeline = require('./pipeline');

  fs = require('fs');

  argv = require('yargs').argv;

  client = new somata.Client;

  PipelineREPL = require('hashpipe/lib/repl');

  pipe = new SomataPipeline({
    client: client
  }).use('http').use('exec').use('encodings').use(require('hashpipe/lib/modules/redis').connect());

  repl = new PipelineREPL(pipe);

  runWith = function(repl, script, cb) {
    var doRunWith, piped;
    doRunWith = function() {
      return repl.executeScript(script, function() {
        return (typeof cb === "function" ? cb() : void 0) || process.exit();
      });
    };
    if (!process.stdin.isTTY) {
      piped = '';
      process.stdin.on('data', function(data) {
        return piped += data.toString();
      });
      return process.stdin.on('end', function() {
        repl.last_out = piped.trim();
        return doRunWith();
      });
    } else {
      return setTimeout(doRunWith, 500);
    }
  };

  if (script_filename = argv.load || argv.l) {
    console.log("Reading from " + script_filename + "...");
    script = fs.readFileSync(script_filename).toString();
    runWith(repl, script, function() {
      return repl.startReadline();
    });
  } else if (script_filename = argv.run || argv.r) {
    script = fs.readFileSync(script_filename).toString();
    runWith(repl, script);
  } else if (script = argv.exec || argv.e) {
    repl.plain = true;
    runWith(repl, script);
  } else {
    repl.startReadline();
  }

}).call(this);
